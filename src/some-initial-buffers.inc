        ; these blocks get relocated :(
        ; the addresses that will match _after_ the relocation are marked by V:
        ; VL5fc0 means that it will get moved to 5fc0, whatever its current address is

        ; code snippets dropped into free spaces after the line buffers?

        ; 10 machines?
        ; 5dxx
        ; 5exx
        ; 5fxx
        ; 60xx
        ; 61xx
        ; 62xx
        ; 63xx
        ; 64xx
        ; 65xx
        ; 66xx
        ; 67xx
        ; 68xx
        ; 69xx
        ; 6axx
        ; 6bxx
        ; 6cxx
        ; Buffer_yy 6d00
        ; 6dxx
        ; 6exx
        ; 6f00 Mask_table, Mult table, etc


; 6b5c -> 5d82
        db 0x01, 0x00, 0x00, 0x50, 0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x05, 0x00, 0x07, 0x00, 0x06, 0x00, 0x10, 0x00, 0x07, 0x00, 0x20, 0x00, 0x08, 0x00, 0x50, 0x00, 0x09, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x50, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x50, 0x00, 0x00, 0x50, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x9a, 0x82, 0x00, 0x00, 0x9b, 0x86, 0x00, 0x00, 0x9c, 0x8a, 0x00, 0x00, 0x9d, 0x8e, 0x00, 0x00, 0x9e, 0x92, 0x00, 0x00, 0x8b, 0xa2, 0x00, 0x00, 0x97, 0x96, 0x00, 0x00, 0x98, 0x9a, 0x00, 0x00, 0x99, 0x9e, 0x00, 0x00, 0x9f, 0x00, 0x5b, 0x00, 0xa0, 0x00, 0x5d, 0x01, 0x00, 0x00

; 6bda -> 5e82
        db 0xac, 0x00, 0x5f, 0x02, 0xa4, 0x00, 0x3d, 0x06, 0xad, 0xc2, 0x3f, 0x07, 0xa3, 0x00, 0x3a, 0x05, 0xa1, 0x00, 0x61, 0x03, 0xa2, 0x00, 0x63, 0x04, 0xa5, 0x82, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0xab, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x45, 0xe9, 0x8e, 0x00, 0x58, 0xea, 0x8f, 0x00, 0x54, 0xeb, 0x90, 0x00, 0x52, 0xec, 0x91, 0x00, 0x41, 0xed, 0x92, 0x00, 0x42, 0xf2, 0x93, 0x00, 0x4f, 0xf3, 0x94, 0x00, 0x4e, 0xf4, 0x95, 0x00, 0x55, 0xf5, 0x96, 0x00, 0x53, 0xf6, 0xa6, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0xa7, 0x8e, 0x1c, 0x00, 0xa9, 0x8e, 0x1d, 0x00, 0x04, 0x11, 0x12, 0x13, 0x14, 0x03, 0x09, 0x09, 0x09, 0x03, 0x0b, 0x0c, 0x0d, 0x01, 0x00, 0x01, 0x15, 0x03, 0x01, 0x02, 0x03, 0x01, 0x0e, 0x01, 0x0f, 0x01, 0x10, 0xef, 0x5e, 0xfc, 0x02, 0x40, 0x03, 0x08

; 6c58 -> 5f82
        db 0xf3, 0x5e, 0xfe, 0x01, 0x50, 0x00, 0x07, 0xeb, 0x5e, 0xfc, 0x01, 0x48, 0x03, 0x08, 0xde, 0x5e, 0xfe, 0x01, 0x50, 0x03, 0x07, 0xe3, 0x5e, 0xfa, 0x01, 0x2f, 0x03, 0x09, 0xed, 0x5e, 0xfe, 0x01, 0x50, 0x01, 0x07, 0xe7, 0x5e, 0xfe, 0x01, 0x50, 0x03, 0x07, 0xf0, 0x01, 0xd9, 0x29, 0xdc, 0x24, 0xe1, 0x1f, 0xd0, 0x10, 0xd0, 0x30, 0xff, 0x20, 0xf0, 0x10, 0xf0, 0x20, 0xf0, 0x10
            ; 5fc0
            ; mve data from a) data_yy_01 and b) txt_square intto Buffer_yy (or back, depending on smc), 0x90 bytes each
.VQ5fc0     ld (var_8452), a
            ld hl, L6bdd
            ld a, (hl)
            cp 0x7b
            ret nz
            dec (hl)

.VQ5fcb:
            ld a, 0xff
            ld (smc_L878f), a
            ld a, 0xeb ; ex de, hl
            jr 1f

.VL5fd4     xor a
            ; store either ex de, hl, or nop
1           ld (0x5fee), a ; VQ5fee
            ld (0x5ff7), a ; VQ5ff7
            ld hl, Data_yy_01
            ld de, Buffer_yy + 256
            ld b, 0x60
            call VQ5fee
            ld hl, txt_square ; !!!
            ld de, Buffer_yy
            ld b, 0x90
.VQ5fee     nop                 ; or ex de, hl
2           ld a, (hl)
            ld (de), a
            ld (hl), 0
            inc hl
            inc de
            djnz 2b
.VQ5ff7     nop                 ; or ex de, hl
            ret
            nop : nop : nop : nop : nop : nop : nop


; 6cd6 -> 6082
.VData_zfz:
        db 0x08, 0x10, 0x18, 0x04, 0xd1 ; 00
        db 0x08, 0x10, 0x18, 0x54, 0xe1 ; 01
        db 0x10, 0x20, 0x60, 0xbc, 0xe5 ; 02
        db 0x08, 0x20, 0x30, 0x7c, 0xe9 ; 03
        db 0x0a, 0x20, 0x3c, 0x0c, 0xf3 ; 04
        db 0x0c, 0x20, 0x48, 0xb0, 0xf4 ; 05
        db 0x0e, 0x20, 0x54, 0x60, 0xf6 ; 06
        db 0x04, 0x08, 0x06, 0x08, 0xf7 ; 07
        db 0x06, 0x08, 0x09, 0x8c, 0xf7 ; 08
        db 0x0a, 0x08, 0x0f, 0xe6, 0xf7 ; 09
        db 0x12, 0x10, 0x36, 0x7c, 0xf8 ; 0a
        ; something to do with logo animation
        db 0x16, 0x10, 0x42, 0x54, 0xf9 ; 0b
        db 0x04, 0x20, 0x18, 0x96, 0xf9 ; 0c
        db 0x04, 0x28, 0x1e, 0xae, 0xf9 ; 0d
        db 0x04, 0x30, 0x24, 0xea, 0xf9 ; 0e
        db 0x0a, 0x28, 0x4b, 0x0e, 0xfa ; 0f
        db 0x0c, 0x18, 0x36, 0xa4, 0xfa ; 10
        db 0x0c, 0x20, 0x48, 0xda, 0xfa ; 11
        db 0x0c, 0x28, 0x5a, 0x6a, 0xfb ; 12
        db 0x10, 0x08, 0x18, 0xc4, 0xfb ; 13
        db 0x10, 0x18, 0x48, 0xdc, 0xfb ; 14
        db 0x10, 0x28, 0x78, 0x6c, 0xfc ; 15
        db 0x08, 0x08, 0x0c, 0xe4, 0xfc ; 16
        db 0x1c, 0x20, 0xa8, 0xf0, 0xfc ; 17
        ; 60fa
        db 0x18, 0x40, 0x00, 0x00, 0x00, 0x00


; 6d54 -> 6182
        db 0xfb, 0x93, 0xbd, 0x77, 0xbf, 0x00, 0x34, 0x18, 0xc6, 0x05, 0x00, 0x00, 0xff, 0x00, 0xf3, 0x01, 0x2a, 0x18, 0xfb, 0x93, 0x37, 0x77, 0x3e, 0x00, 0x14, 0x04, 0xbe, 0x08, 0x00, 0x00, 0x2f, 0x00, 0x57, 0xff, 0x12, 0x02, 0xfb, 0x93, 0x00, 0x77, 0x07, 0x00, 0x10, 0x04, 0xbe, 0x08, 0x00, 0x00, 0x2f, 0x00, 0x2c, 0x01, 0x24, 0x02, 0xfb, 0x93, 0x92, 0x77, 0x95, 0x00, 0x1c, 0x04, 0xbe, 0x0a, 0x00, 0x00, 0x2f, 0x00, 0xb4, 0xff, 0x1e, 0x02, 0xfb, 0x93, 0x5c, 0x77, 0x5e, 0x00, 0x14, 0x04, 0xbe, 0x08, 0x00, 0x00, 0x2f, 0x00, 0x7d, 0x01, 0x36, 0x02, 0x0a, 0x94, 0xaa, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x50, 0x01, 0x00, 0x01, 0x80, 0x07, 0x48, 0x93, 0x2b, 0x78, 0x2f, 0x38, 0x4c, 0x0c, 0xae, 0x04, 0x1f, 0xf3, 0x26, 0x03, 0x00, 0x00, 0x09, 0x03


; 6dd2 -> 6282
        db 0x48, 0x93, 0x74, 0x78, 0x78, 0x81, 0x95, 0x06, 0xb2, 0x04, 0x1f, 0xf3, 0x26, 0x03, 0x00, 0xf0, 0x09, 0x03, 0x48, 0x93, 0x00, 0x78, 0x04, 0x0d, 0x24, 0x00, 0xaa, 0x04, 0x1f, 0xf3, 0x26, 0x03, 0x00, 0x10, 0x06, 0x03, 0x48, 0x93, 0x53, 0x78, 0x57, 0x60, 0x6e, 0x16, 0xb6, 0x04, 0x1f, 0xf3, 0x26, 0x03, 0x00, 0x10, 0x0c, 0x03, 0x48, 0x93, 0x00, 0x79, 0x04, 0x0d, 0x21, 0x13, 0xb6, 0x04, 0x1f, 0xf3, 0x26, 0x03, 0x00, 0x10, 0x0c, 0x03, 0xaf, 0x93, 0x28, 0x79, 0x2b, 0x00, 0x00, 0x02, 0xa6, 0x03, 0x00, 0x00, 0x37, 0x03, 0x00, 0x10, 0x02, 0x01, 0xd6, 0x93, 0x34, 0x79, 0x38, 0x00, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0x37, 0x00, 0x03, 0x01, 0x06, 0x01, 0x48, 0x93, 0xc4, 0x78, 0xc8, 0x00, 0x00, 0x12, 0xba, 0x03, 0x1f, 0xea, 0x37, 0x03, 0x00, 0x00, 0x02, 0x01


; 6e50 -> 6382
        db 0x48, 0x93, 0x9c, 0x78, 0xa0, 0xb0, 0xa9, 0x05, 0xb6, 0x03, 0x1f, 0xea, 0x37, 0x03, 0x00, 0xf0, 0x03, 0x01, 0x48, 0x93, 0xd1, 0x78, 0xd4, 0xdd, 0xf4, 0x0a, 0xb2, 0x04, 0x1f, 0xea, 0x37, 0x03, 0xf0, 0xf0, 0x09, 0x01, 0xfb, 0x93, 0x60, 0x79, 0x66, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa8, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x07, 0x00, 0x00, 0x00, 0x42, 0x05, 0x00, 0x00, 0x01, 0xfb, 0x93, 0x42, 0x79, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0xfb, 0x93, 0x46, 0x79, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x01, 0xd6, 0x93, 0x79, 0x79, 0x7e, 0x00, 0x00, 0x00, 0xaa, 0x05, 0x00, 0x00, 0x37, 0x00, 0x01, 0x01, 0x02, 0x01


; 6ece -> 6482
        db 0xd6, 0x93, 0x79, 0x79, 0x7e, 0x00, 0x00, 0x00, 0xaa, 0x05, 0x00, 0x00, 0x37, 0x00, 0x01, 0xff, 0x02, 0x01, 0xd6, 0x93, 0x79, 0x79, 0x97, 0x00, 0x00, 0x00, 0xaa, 0x05, 0x00, 0x00, 0x37, 0x00, 0x02, 0x01, 0x02, 0x01, 0xd6, 0x93, 0x79, 0x79, 0x97, 0x00, 0x00, 0x00, 0xaa, 0x05, 0x00, 0x00, 0x37, 0x00, 0x02, 0xff, 0x02, 0x01, 0x7e, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x26, 0x40, 0x00, 0x00, 0x00, 0x03, 0x90, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x01, 0x87, 0x93, 0xfb, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x14, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00


; 6f4c -> 6582
                db 0xfb, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x50, 0x08, 0x00, 0xff, 0x00, 0x07, 0xfb, 0x93, 0xaa, 0x79, 0xb2, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x50, 0x08, 0x00, 0xff, 0x00, 0x07

.VL65a6
                db 0xfb, 0x93, 0x62, 0x7b, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x7e, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x03, 0x00

.VL65ca         db 0x33, 0x93, 0x08, 0x7a, 0x0f, 0x18, 0x46, 0x30, 0x00, 0x03, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0x00, 0x03


                ; some buffer repeatedly moved to mach[0x03] by Pre_game_animation / Qa65d
                ; last byte gets overwritten by Pre_game_animation / .enter
.VL65dc         db 0x7d, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

.Vreset_attrs_8_bottoms:
                exx
                ld hl, 0x59e0 ; attrs_row(15)
                ld bc, 0x100  ; 8 lines: 15..22
                ld (hl), 0x47   ; white on black, bright
                ld e, l
                ld d, h
                inc de
                ldir
                exx
                ret

                db 0, 0

; 6fca -> 6682
.VQ6682
                ld a, (L6652)
                or a
                jr nz, .leave
                call Joystick_read
                ei
                jr nz, 1f
                call Q831a ; 66c8(A=4), then wait_fire_some_time
                jp J5c4d

1               ld a, 3
                call VQ66c8
                call VQ66bd
.wait_more      ld bc, 0xdffe
                in a, (c)
                and 1
                ei
                ld b, 5
.halt           halt
                djnz .halt
                jr nz, .wait_more
                ld bc, 0x4000
                call X8333

.leave          xor a
                ld (L664c), a
                ret

.VQ66b6         call VQ66c8
                xor a
                ld (L79ff), a

.VQ66bd
                ld hl, mach9 + 2

1               call X8e2b
                ld a, (hl)
                rra
                jr c, 1b
                ret

.VQ66c8         push af
                ld hl, mach9 + 2
                ld a, (hl)
                rra
                jr nc, 1f
                call X97a3
                call VQ66bd

1               pop af
                dec a
                ld (smc_L7b63), a
                ld bc, 0x48f0
                ld de, VL65a6
                xor a
                call Xa65d
                ex de, hl
                ld l, 02
                ld (hl), 0x81

2               call X8e2b
                ld a, (L6640)
                cp 2
                jr nz, 2b
                jp J8330

.VL66f7
                db 0x07, 0x47, 0x46

.VPre_game_color_modes:
.VL66fa
                ; the "switchblade" logo loops through these colors, 66fa..66ff
                db 0x07, 0x46, 0x05, 0x47, 0x06, 0x45
